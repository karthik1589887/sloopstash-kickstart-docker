pipeline {
    agent any
    environment {
        DOCKER_REPO = "karthik2502"
        CREDENTIALS_ID = "dockerhub_credentials"
    }
    stages {
        stage('CI: Download sources') {
            steps {
                sh(
          script:'git clone https://github.com/sloopstash/kickstart-docker.git kickstart-docker',
          returnStatus:true
        )
            }
        }
        stage('CI: Build Docker Images') {
            steps {
                dir('kickstart-docker/test-image') {
                    script {
                        def images = sh(script: "ls -d */", returnStdout: true).trim().split('\n')

                        images.each { imageFolder ->
                            def imageName = imageFolder.replace('/', '')

                            def versions = sh(script: "ls ${imageFolder}", returnStdout: true).trim().split('\n')

                            versions.each { version ->
                                def dockerfilePath = "${imageFolder}${version}/amazon-linux-2.dockerfile"
                                def contextPath = "${imageFolder}${version}/context"
                                def imageTag = "${imageName}:${version}"

                                // Build Docker image
                                sh """
                                    echo "Building ${DOCKER_REPO}/${imageTag}"
                                    sudo docker build -t ${DOCKER_REPO}/${imageTag} -f ${dockerfilePath} ${contextPath}
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('CI: Push Docker Images') {
            steps {
                dir('kickstart-docker/test-image') {
                    script {
                        def images = sh(script: "ls -d */", returnStdout: true).trim().split('\n')

                        images.each { imageFolder ->
                            def imageName = imageFolder.replace('/', '')

                            def versions = sh(script: "ls ${imageFolder}", returnStdout: true).trim().split('\n')

                            versions.each { version ->
                                def imageTag = "${imageName}:${version}"

                                // Push Docker image
                                sh """
                                    echo "Pushing ${DOCKER_REPO}/${imageTag}"
                                    sudo docker login -u $DOCKER_USER -p $DOCKER_PASS
                                    sudo docker push ${DOCKER_REPO}/${imageTag}
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up Docker resources...'
            sh 'sudo docker system prune -f'
        }
    }
}
